(menu-bar-mode 1)
(menu-bar-mode 0)

(defun double (x) (* x 2))
(double 2)
(eq #'double (car (list #'double)))
((lambda (x) (* x 2)) 3)
(symbol-function 'double)
(setq x #'append)

(apply #'+ '(1 2))
(sort '(1 4 2 5) #'<)
(remove-if #'evenp '(1 2 3 4 5))
(defun our-remove-if (fn lst)
  (if (null lst)
      nil
    (if (funcall fn (car lst))
	(our-remove-if fn (cdr lst))
      (cons (car lst) (our-remove-if fn (cdr lst))))))
(our-remove-if #'evenp '(1 2 3 4 5))
(defun list+ (lst n)
  (mapcar #'(lambda (x) (+ x n))
	  lst))
(defun make-adder (n)
  #'(lambda (x) (+ x n)))
(setq add2 (make-adder 2))
(funcall add2 5)

(defvar bm-show-mode-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "RET") 'bm-show-goto-bookmark)
    (define-key map (kbd "SPC") 'bm-show-bookmark)
    (define-key map (kbd "M-n") 'bm-show-next)
    (define-key map (kbd "M-p") 'bm-show-prev)
    (define-key map "q"         'bm-show-quit-window)
    (define-key map (kbd "C-c C-c")   'bm-show)
    map)
  "Keymap for `bm-show-mode'.")

(put-text-property 0 (- (length "aaa") 1) 'mouse-face 'highlight "aaa")
(symbol-name 'aaa)
(make-symbol "aaa")
(ahs-highlight "aaa" 0 1000)
(set 'aab 2)

(setq x 0)
(defun do-the-loop ()
  (interactive)
  (message "start the loop from %d" x)
  (while (< x 5)
    (message "Loop index: %d" x)
    (incf x))
  (message "Done!"))

(defun do-the-loop ()
  (interactive)
  (message "start the loop from %d" x)
  (while (< d 5)
    (message "Loop index: %d" x)
    (incf x))
  (message "Done!")
  )

(let ((y 5)
      (z 10))
  (* y z))

(let* ((y 5)
      (z (+ y 5)))
      (* y z))
(setq helm-M-x-fuzzy-match t)
                                        ;dsjfl;;

34
(* 23 23)
'(1 2 3)
(list 1 2 3)
(car (car '(1 3 4)))
[1 2 3]
(type-of 40)

(if t
    (progn
      (message "Hey")
      5)
  (message "Doing")
  (+ 2 2))

(setq aaa (if (string-equal (format-time-string "%A")
                            "Monday")
              3
            2))

(dolist (item '("one" "two" "three" "four" "five"))
  (message "Item %s" item))

(defun efs/recursion-test (counter limit)
  (when (< counter limit)
    (message "I'm looping!! %d" counter)
    (efs/recursion-test (1+ counter) limit)))
(efs/recursion-test 0 5)
(symbol)
