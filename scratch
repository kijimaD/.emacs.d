(menu-bar-mode 1)
(menu-bar-mode 0)

(defun double (x) (* x 2))
(double 2)
(eq #'double (car (list #'double)))
((lambda (x) (* x 2)) 3)
(symbol-function 'double)
(setq x #'append)

(apply #'+ '(1 2))
(sort '(1 4 2 5) #'<)
(remove-if #'evenp '(1 2 3 4 5))
(defun our-remove-if (fn lst)
  (if (null lst)
      nil
    (if (funcall fn (car lst))
	(our-remove-if fn (cdr lst))
      (cons (car lst) (our-remove-if fn (cdr lst))))))
(our-remove-if #'evenp '(1 2 3 4 5))
(defun list+ (lst n)
  (mapcar #'(lambda (x) (+ x n))
	  lst))
(defun make-adder (n)
  #'(lambda (x) (+ x n)))
(setq add2 (make-adder 2))
(funcall add2 5)