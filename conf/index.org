#+title: kijimad Emacs Config
#+SETUPFILE: https://gitlab.com/OlMon/org-themes/-/raw/master/src/bigblow_inline/bigblow_inline.theme

* Emacs
Emacsの文芸的設定。

- [[https://github.com/kijimaD/.emacs.d][Repository]]

* corfu
corfuはシンプルな補完を提供するパッケージ。

- [[https://tam5917.hatenablog.com/entry/2022/02/05/141115][corfuまわりの設定（vertico, marginalia, orderless, cape, kind-icon, affe） - 備忘録]]

#+caption: 起動する
#+begin_src emacs-lisp
  (require 'corfu)
  (global-corfu-mode)
#+end_src

#+caption: 基本設定
#+begin_src emacs-lisp
  (setq corfu-auto t)
  (setq corfu-auto-prefix 3)
  (setq corfu-count 15)
  (setq corfu-cycle t)
  (setq corfu-preselect-first t) ;; 自動的に最初の候補を選択する
  (setq corfu-quit-at-boundary t) ;; スペースを入れるとquit
  (setq corfu-quit-no-match t)
#+end_src

#+caption: 候補選択を循環させる
#+begin_src emacs-lisp
  (setq completion-cycle-threshold 3)

  (defun corfu-beginning-of-prompt ()
    "Move to beginning of completion input."
    (interactive)
    (corfu--goto -1)
    (goto-char (car completion-in-region--data)))

  (defun corfu-end-of-prompt ()
    "Move to end of completion input."
    (interactive)
    (corfu--goto -1)
    (goto-char (cadr completion-in-region--data)))

  (define-key corfu-map [remap move-beginning-of-line] #'corfu-beginning-of-prompt)
  (define-key corfu-map [remap move-end-of-line] #'corfu-end-of-prompt)
#+end_src

#+caption: その他の連携パッケージ
#+begin_src emacs-lisp
  (require 'vertico)
  (vertico-mode)
  (setq vertico-count 20)

  (require 'vertico-directory)
  (define-key vertico-map (kbd "C-l") #'vertico-directory-up)
  (define-key vertico-map "\r" #'vertico-directory-enter)  ;; enter dired
  (define-key vertico-map "\d" #'vertico-directory-delete-char)

  (require 'marginalia)
  (marginalia-mode +1)
  ;; marginalia-annotatorsをサイクルする
  (define-key minibuffer-local-map (kbd "C-M-a") #'marginalia-cycle)

  (require 'orderless)
  (setq completion-styles '(orderless partial-completion))
  (setq completion-category-defaults nil)
  (setq completion-category-overrides nil)

  (orderless-define-completion-style orderless+initialism
    (orderless-matching-styles '(orderless-initialism ;;一番最初にinitializm
                                 orderless-literal  ;;次にリテラルマッチ
                                 orderless-regexp)))

  ;; (setq completion-category-defaults nil)
  (setq completion-category-overrides
        '((eglot (styles orderless+initialism))
          (command (styles orderless+initialism))
          (symbol (styles orderless+initialism))
          (variable (styles orderless+initialism))))
  (setq orderless-component-separator #'orderless-escapable-split-on-space)

  (require 'cape)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-tex)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
  (add-to-list 'completion-at-point-functions #'cape-abbrev)
  (add-to-list 'completion-at-point-functions #'cape-ispell)
  (add-to-list 'completion-at-point-functions #'cape-symbol)
#+end_src

#+caption:
#+begin_src emacs-lisp
  ;; EmacsのSVG対応コンパイルが必要
  (require 'kind-icon)
  (setq kind-icon-default-face 'corfu-default)
  ;; If 4k, big size icon displayed.
  ;; (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)
  ;; (pop corfu-margin-formatters)

  ;; Available commands
  ;; affe-grep: Filters the content of all text files in the current directory
  ;; affe-find: Filters the file paths of all files in the current directory
  (require 'affe)
  (consult-customize affe-grep :preview-key (kbd "M-."))
  (defvar affe-orderless-regexp "")
  (defun affe-orderless-regexp-compiler (input _type)
    (setq affe-orderless-regexp (orderless-pattern-compiler input))
    (cons affe-orderless-regexp
          (lambda (str) (orderless--highlight affe-orderless-regexp str))))
  (setq affe-regexp-compiler #'affe-orderless-regexp-compiler)

  (use-package corfu-doc
    :straight (:host github :repo "galeo/corfu-doc")
    :hook (corfu-mode . corfu-doc-mode))
#+end_src

* ivy
ivyはさまざまなインクリメンタル検索を追加するパッケージ。

- 参考設定
  - https://qiita.com/takaxp/items/2fde2c119e419713342b

#+caption: M-o をivy-hydra-read-action に割り当てる
#+begin_src emacs-lisp
  (when (require 'ivy-hydra nil t)
    (setq ivy-read-action-function #'ivy-hydra-read-action))
#+end_src

#+caption: Magitとの連携
#+begin_src emacs-lisp
  (setq magit-completing-read-function 'ivy-completing-read)
#+end_src

#+caption: ミニバッファでコマンド発行を認める。何階層入ったかプロンプトに表示する
#+begin_src emacs-lisp
  (when (setq enable-recursive-minibuffers t)
    (minibuffer-depth-indicate-mode 1))
#+end_src

#+caption: ESC連打でミニバッファを閉じる
#+begin_src emacs-lisp
  (define-key ivy-minibuffer-map (kbd "<escape>") 'minibuffer-keyboard-quit)
#+end_src

#+caption: プロンプトの表示が長い時に折り返す（選択候補も折り返される）
#+begin_src emacs-lisp
  (setq ivy-truncate-lines nil)
#+end_src

#+caption: リスト先頭で `C-p' するとき，リストの最後に移動する
#+begin_src emacs-lisp
  (setq ivy-wrap t)
#+end_src

#+caption: 表示設定する
#+begin_src emacs-lisp
  (setq ivy-count-format "%d -> %d ")
#+end_src

#+caption: 新規作成プロンプトを表示する
#+begin_src emacs-lisp
  (setq ivy-use-selectable-prompt t)
#+end_src

#+caption: counsel-mark-ring のリストをソートさせない
#+begin_src emacs-lisp
  (with-eval-after-load "ivy"
    (setf (alist-get 'counsel-mark-ring ivy-sort-functions-alist) nil))
#+end_src

#+caption: 外観設定する
#+begin_src emacs-lisp
  (all-the-icons-ivy-rich-mode 1)
  (ivy-rich-mode 1)

  (custom-set-faces
   '(ivy-current-match
     ((((class color) (background light))
       :background "#FFF3F3" :distant-foreground "#000000")
      (((class color) (background dark))
       :background "#404040" :distant-foreground "#abb2bf")))
   '(ivy-minibuffer-match-face-1
     ((((class color) (background light)) :foreground "#666666")
      (((class color) (background dark)) :foreground "#999999")))
   '(ivy-minibuffer-match-face-2
     ((((class color) (background light)) :foreground "#c03333" :underline t)
      (((class color) (background dark)) :foreground "#e04444" :underline t)))
   '(ivy-minibuffer-match-face-3
     ((((class color) (background light)) :foreground "#8585ff" :underline t)
      (((class color) (background dark)) :foreground "#7777ff" :underline t)))
   '(ivy-minibuffer-match-face-4
     ((((class color) (background light)) :foreground "#439943" :underline t)
      (((class color) (background dark)) :foreground "#33bb33" :underline t))))
#+end_src

#+caption: 履歴表示する
#+begin_src emacs-lisp
(when (require 'smex nil t)
  (setq smex-history-length 35)
  (setq smex-completion-method 'ivy))
#+end_src

#+caption: 有効化
#+begin_src emacs-lisp
  (ivy-mode 1)
#+end_src
* counsel
counselはさまざまなインクリメンタル検索を可能にするパッケージ。

#+caption: キーバインド
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'counsel-switch-buffer)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "C-x C-u") 'ivy-resume)
  (global-set-key (kbd "C-x C-g") 'counsel-git-grep)
  (global-set-key (kbd "C-x r i") 'counsel-register)
  (global-set-key (kbd "M-y") 'counsel-yank-pop)
  (global-set-key (kbd "M-i") 'swiper-thing-at-point)
#+end_src

#+caption: 検索エンジンをGoogleに設定する
#+begin_src emacs-lisp
  (setq counsel-search-engine 'google)
#+end_src

#+caption: 有効化
#+begin_src emacs-lisp
  (counsel-mode 1)
#+end_src
* ag
agはgrepより高速な検索ツール。

#+caption: agのデフォルト入力値をthing-at-pointにする
#+begin_src emacs-lisp
  (defun ad:counsel-ag (f &optional initial-input initial-directory extra-ag-args ag-prompt caller)
    (apply f (or initial-input (ivy-thing-at-point))
           (unless current-prefix-arg
             (or initial-directory default-directory))
           extra-ag-args ag-prompt caller))

  (advice-add 'counsel-ag :around #'ad:counsel-ag)
#+end_src
* eldoc
eldocは関数ドキュメントを表示するパッケージ。

#+caption: eldocをミニバッファに表示する
#+begin_src emacs-lisp
  (with-eval-after-load "eldoc"
    (defun ad:eldoc-message (f &optional string)
      (unless (active-minibuffer-window)
        (funcall f string)))
    (advice-add 'eldoc-message :around #'ad:eldoc-message))
#+end_src
* eshell
eshellはEmacs Lispで実装されたシェル。

#+caption: eshellの設定を追加する
#+begin_src emacs-lisp
  (defun efs/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    ;; Bind some useful keys for evil-mode
    ;; (define-key eshell-mode-map (kbd "M-r") 'helm-eshell-history)
    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t
          eshell-git-prompt-use-theme 'multiline
          eshell-toggle-height-fraction 2
          eshell-toggle-use-projectile-root t))
  (add-hook 'eshell-first-time-mode-hook 'efs/configure-eshell)
#+end_src

- ベース設定は https://github.com/daviwil/emacs-from-scratch/blob/master/show-notes/Emacs-09.org から取ってきた

#+caption: キーバインドを設定する
#+begin_src emacs-lisp
  (global-set-key (kbd "C-M-;") 'eshell-toggle)
#+end_src

#+caption: eshellのサジェストを設定する
#+begin_src emacs-lisp
  (add-hook 'eshell-first-time-mode-hook 'esh-autosuggest-mode)
  (setq esh-autosuggest-delay 0.5)
#+end_src

* Vterm
vtermはCで実装されたシェル。

#+caption: 各種設定する
#+begin_src emacs-lisp
(when window-system
  (require 'vterm)
  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
  (setq vterm-toggle-scope 'project)
  (setq vterm-toggle-project-root t)
  (setq vterm-max-scrollback 10000)
  ;; toggle
  (global-set-key [f9] 'vterm-toggle)
  (global-set-key (kbd "C-M-:") 'vterm-toggle)
  (global-set-key [C-f9] 'vterm-toggle-cd)

  (setq vterm-toggle-fullscreen-p nil)
  (add-to-list 'display-buffer-alist
               '((lambda(bufname _) (with-current-buffer bufname
                                      (or (equal major-mode 'vterm-mode)
                                          (string-prefix-p vterm-buffer-name bufname))))
                 (display-buffer-reuse-window display-buffer-at-bottom)
                 ;;(display-buffer-reuse-window display-buffer-in-direction)
                 ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                 ;;(direction . bottom)
                 ;;(dedicated . t) ;dedicated is supported in emacs27
                 (reusable-frames . visible)
                 (window-height . 0.3))))
#+end_src
* Theme
いい感じのテーマを設定する。割と白いテーマと黒いテーマを切り替えるのですぐ切り替えられるようにする。

#+caption: doom themeを読み込み
#+begin_src emacs-lisp
  (require 'doom-themes)
  (doom-themes-org-config)
  (setq custom-safe-themes t)
  (setq-default custom-enabled-themes '(modus-operandi))
#+end_src

doom themeはモダンなテーマ集。

- ダーク系
  - doom-vibrant
  - spacemacs-dark
  - doom-dracula
  - modus-vivendi
  - leuven-dark
- ライト系
  - leuven
  - doom-acario-light
  - doom-homage-white
  - modus-operandi

#+caption: 再適用する
#+begin_src emacs-lisp
  (defun reapply-themes ()
    "Forcibly load the themes listed in `custom-enabled-themes'."
    (dolist (theme custom-enabled-themes)
      (unless (custom-theme-p theme)
        (load-theme theme)))
    (custom-set-variables `(custom-enabled-themes (quote ,custom-enabled-themes)))
    (efs/org-font-setup)
    ;; (kd/set-modus-face)
    )

  (add-hook 'after-init-hook 'reapply-themes)
#+end_src

テーマ適用を最後に実行しないと、設定が上書きされることがあるため。
- https://github.com/purcell/emacs.d

#+caption: モードライン設定
#+begin_src emacs-lisp
  (doom-modeline-mode)

  ;; 表示項目の設定
  (setq doom-modeline-buffer-file-name-style 'truncate-with-project)
  (setq doom-modeline-icon t)
  (setq doom-modeline-major-mode-icon t)
  (setq doom-modeline-minor-modes nil)
  (setq doom-modeline-buffer-encoding nil)
  (line-number-mode)
  (column-number-mode)
  (doom-modeline-def-modeline
    'my-simple-line
    '(bar matches buffer-info remote-host input-method major-mode process buffer-position)
    '(misc-info vcs checker))

  ;; 縦調整
  (defun my-doom-modeline--font-height ()
    (- (frame-char-height) 20))
  (advice-add #'doom-modeline--font-height :override #'my-doom-modeline--font-height)
  (setq doom-modeline-height 20)

  (defun setup-custom-doom-modeline ()
    (doom-modeline-set-modeline 'my-simple-line 'default))
  (add-hook 'doom-modeline-mode-hook 'setup-custom-doom-modeline)

  (setup-custom-doom-modeline)
#+end_src

#+caption: modus themeのカスタマイズ設定
#+begin_src emacs-lisp
  (defun kd/set-modus-face ()
    (setq modus-themes-slanted-constructs t
          modus-themes-bold-constructs t
          modus-themes-no-mixed-fonts t
          modus-themes-subtle-line-numbers t
          modus-themes-mode-line '(moody borderless)
          modus-themes-syntax 'faint
          modus-themes-paren-match 'intense-bold
          modus-themes-region 'bg-only
          modus-themes-diffs 'deuteranopia
          modus-themes-org-blocks 'gray-background
          modus-themes-variable-pitch-ui t
          modus-themes-variable-pitch-headings t
          modus-themes-scale-headings t
          modus-themes-scale-1 1.1
          modus-themes-scale-2 1.15
          modus-themes-scale-3 1.21
          modus-themes-scale-4 1.27
          modus-themes-scale-title 1.33)

    (set-face-foreground 'vertical-border "gray")

    (set-face-attribute 'mode-line nil
                        :background nil
                        :overline "black"
                        :underline nil
                        :box nil)

    (set-face-attribute 'mode-line-inactive nil
                        :background "white"
                        :overline "gray"
                        :underline nil
                        :box nil)

    (window-divider-mode 0))

  (kd/set-modus-face)
#+end_src

#+caption: モードラインからマイナーモードを消す
#+begin_src emacs-lisp
  (setq my-hidden-minor-modes
        '(
          abbrev-mode
          auto-highlight-symbol-mode
          auto-revert-mode
          back-button-mode
          beacon-mode
          command-log-mode
          ctags-auto-update-mode
          eldoc-mode
          flyspell-mode
          global-whitespace-mode
          google-this-mode
          highlight-indent-guides-mode
          magit-auto-revert-mode
          projectile-mode
          projectile-rails-mode
          rinari-minor-mode
          robe-mode
          rubocop-mode
          ruby-electric-mode
          undo-tree-mode
          which-key-mode
          yas-minor-mode
          ))
  (mapc (lambda (mode)
          (setq minor-mode-alist
                (cons (list mode "") (assq-delete-all mode minor-mode-alist))))
        my-hidden-minor-modes)
#+end_src

describe-minor-mode-from-indicator で調べられる。

* EXWM
:PROPERTIES:
:ID:       c99b472b-dd3b-494e-a733-5cbf95781064
:END:
EXWMはEmacs上で動くウィンドウマネージャ。
- https://github.com/daviwil/emacs-from-scratch/blob/39f63fe133cd4c41e13bbd1551c6517162851411/show-notes/Emacs-Desktop-03.org

#+caption: require
#+begin_src emacs-lisp
  (require 'exwm)
  (require 'exwm-config)
#+end_src

#+caption: ほかのウィンドウマネージャを置き換えて起動する
#+begin_src emacs-lisp
  (setq exwm-replace t)
#+end_src

#+caption: ほかのワークスペースのバッファに移動できるようにする
#+begin_src emacs-lisp
  (setq exwm-layout-show-all-buffers t)
#+end_src

#+caption: マウス設定
#+begin_src emacs-lisp
  (setq mouse-autoselect-window nil
          focus-follows-mouse t
          exwm-workspace-warp-cursor t
          exwm-workspace-number 5)
#+end_src

#+caption: ワークスペースのバッファに名前をつける
#+begin_src emacs-lisp
(add-hook 'exwm-update-class-hook
          (lambda ()
            (exwm-workspace-rename-buffer exwm-class-name)))
(add-hook 'exwm-update-title-hook
          (lambda ()
            (pcase exwm-class-name
              ("qutebrowser" (exwm-workspace-rename-buffer (format "Qutebrowser: %s" exwm-title)))
              ("chrome" (exwm-workspace-rename-buffer (format "Chrome: %s" exwm-title))))))
#+end_src

#+caption: ウィンドウのセットを起動する
#+begin_src emacs-lisp
(defun kd/set-init ()
  "Window Manager関係の各種プログラムを起動する."
  (interactive)
  (progn
    (call-process-shell-command "shepherd")
    (call-process-shell-command "~/dotfiles/.config/polybar/launch.sh")
    (call-process-shell-command "blueberry")

    (exwm-workspace-switch-create 2)
    (start-process-shell-command "google-chrome" nil "google-chrome")
    (start-process-shell-command "firefox" nil "firefox")
    (start-process-shell-command "spotify" nil "spotify")

    (message "please wait...")
    (sleep-for 2)

    (exwm-workspace-switch-create 0)
    (persp-switch "1")
    (delete-other-windows)
    (org-journal-new-entry nil)
    (vterm-toggle)
    (vterm-toggle)
    (persp-switch "2")
    (find-file "~/roam")
    (vterm-toggle)
    (vterm-toggle)
    (org-agenda nil "z")
    (persp-switch "3")
    (split-window-right)
    (switch-to-buffer "firefox")
    (persp-switch "4")
    (switch-to-buffer "firefox")
    (vterm-toggle)
    (vterm-toggle)
    (persp-switch "5")
    (find-file "~/dotfiles")
    (vterm-toggle)
    (vterm-toggle)
    (magit-status)
    (persp-switch "6")
    (find-file "~/.emacs.d/conf")
    (vterm-toggle)
    (vterm-toggle)
    (magit-status)
    (persp-switch "7")
    (find-file "~/ProjectOrg")
    (persp-switch "8")
    (find-file "~/Project")
    (persp-switch "9")
    (elfeed)

    (exwm-workspace-switch-create 1)
    (persp-switch "1")
    (persp-switch "2")
    (find-file "~/roam")
    (org-agenda nil "z")
    (persp-switch "4")
    (switch-to-buffer "Google-chrome")
    (persp-switch "8")
    (find-file "~/Project")

    (exwm-workspace-switch-create 2)
    (switch-to-buffer "Spotify")

    (exwm-workspace-switch-create 0)
    (persp-switch "4")

    (message "settings done!")))
#+end_src

#+caption: 背景を設定する
#+begin_src emacs-lisp
(defun kd/set-background ()
  "背景をセットする."
  (interactive)
  (start-process-shell-command "compton" nil "compton --config ~/dotfiles/.config/compton/compton.conf")
  (start-process-shell-command "fehbg" nil "~/dotfiles/.fehbg"))
#+end_src

#+caption: キーバインド設定
#+begin_src emacs-lisp
(define-key exwm-mode-map (kbd "C-M-:") 'vterm-toggle)
(define-key exwm-mode-map (kbd "C-M-<right>") 'persp-next)
(define-key exwm-mode-map (kbd "C-M-<left>") 'persp-prev)
(define-key exwm-mode-map (kbd "<henkan>") 'pretty-hydra-henkan/body)
#+end_src

#+caption: 設定する
#+begin_src emacs-lisp
  (when window-system
    (progn
      (exwm-config-example)
      ;; (kd/set-init)
      ;; (kd/set-background)
      ))
#+end_src
* Polybar
:PROPERTIES:
:ID:       31fe46cc-99bc-46e5-bf49-0483fcdd99ed
:END:
polybarは柔軟にカスタマイズできるメニューバーを表示するソフトウェア。polybarとの連携を記載する。

#+caption: polybarプロセスを保持する変数
#+begin_src emacs-lisp
  (defvar kd/polybar-process nil
    "Holds the process of the running Polybar instance, if any")
#+end_src

#+caption: バーを起動する
#+begin_src emacs-lisp
  (defun kd/start-panel ()
    (interactive)
    (kd/kill-panel)
    (setq kd/polybar-process (start-process-shell-command "polybar" nil "~/dotfiles/.config/polybar/launch.sh")))
#+end_src

#+caption: バーを停止する
#+begin_src emacs-lisp
  (defun kd/kill-panel ()
    (interactive)
    (when kd/polybar-process
      (ignore-errors
        (kill-process kd/polybar-process)))
    (setq kd/polybar-process nil))
#+end_src

#+caption: ワークスペースをpolybarで表示する設定
#+begin_src emacs-lisp
  (defun kd/polybar-exwm-workspace ()
    (pcase exwm-workspace-current-index
      (0 "%{F#797D7F}Work%{F-} Home")
      (1 "Work %{F#797D7F}Home%{F-}")
      (2 "")
      (3 "")
      (4 "")
      (9 "")))

  (defun kd/send-polybar-exwm-workspace ()
    (kd/send-polybar-hook "exwm-workspace" 1))

  (defun kd/send-polybar-hook (module-name hook-index)
    (start-process-shell-command "polybar-msg" nil (format "polybar-msg hook %s %s" module-name hook-index)))

  (add-hook 'exwm-workspace-switch-hook #'kd/send-polybar-exwm-workspace)
#+end_src
* Workspace
1~9のワークスペースを作成し、番号で切り替えられるようにする。

#+caption: モード初期化
#+begin_src emacs-lisp
  (require 'perspective)
  (setq persp-initial-frame-name "1")
  (setq persp-modestring-dividers '("" "" " "))
  (persp-mode 1)
#+end_src

#+caption: ワークスペースを生成する
#+begin_src emacs-lisp
  (mapc (lambda (i)
          (persp-switch (int-to-string i)))
        (number-sequence 1 9))
  (persp-switch "1")
#+end_src
* Hydra
:PROPERTIES:
:ID:       0e450475-54cf-432d-8a75-d8a55b6c83bf
:END:
Hydraはカスタマイズ可能なキー表示を追加するパッケージ。キーバインド空間を制限しつつ、入力のヒントを表示して使いやすくする。

#+caption: グローバルに便利なメニューを追加する
#+begin_src emacs-lisp
  (with-eval-after-load 'pretty-hydra
    (pretty-hydra-define pretty-hydra-henkan (:color blue :foreign-keys warn :title "Convenient Tools")
      ("Media"
       (("<prior>" kd/mint-volume-up "up")
        ("<next>" kd/mint-volume-down "down")
        ("<pause>" kd/player-stop "stop"))

       "Find"
       (("a" counsel-apropos "apropos")
        ("f" counsel-ag "ag")
        ("h" counsel-find-library "lib")
        ("i" counsel-imenu "imenu")
        ("r" counsel-register "register")
        ("b" counsel-bookmark "bookmark")
        ("p" persp-ivy-switch-buffer "persp-buffer")
        ("w" swiper-all-thing-at-point "all"))

       "Execute"
       (("e" counsel-linux-app "run")
        ("c" recompile "recompile")
        ("s" counsel-search "google"))

       "Git"
       (("g" magit-blame)
        (">" git-gutter+-next-hunk)
        ("<" git-gutter+-previous-hunk)
        ("@" git-timemachine)
        ("l" git-link))

       "Edit"
       (("q" query-replace "replace")
        ("y" ivy-yasnippet "yas"))

       "Window"
       (("1" (lambda nil (interactive) (persp-switch (int-to-string 1))) "Journal")
        ("2" (lambda nil (interactive) (persp-switch (int-to-string 2))) "Roam")
        ("3" (lambda nil (interactive) (persp-switch (int-to-string 3))) "Browser(Half)")
        ("4" (lambda nil (interactive) (persp-switch (int-to-string 4))) "Browser(Full)")
        ("5" (lambda nil (interactive) (persp-switch (int-to-string 5))) "Dotfiles")
        ("6" (lambda nil (interactive) (persp-switch (int-to-string 6))) "Emacs")
        ("7" (lambda nil (interactive) (persp-switch (int-to-string 7))) "Sub")
        ("8" (lambda nil (interactive) (persp-switch (int-to-string 8))) "Main")
        ("9" (lambda nil (interactive) (persp-switch (int-to-string 9))) "Blueberry"))))

    (define-key projectile-rails-mode-map (kbd "C-c r") 'pretty-hydra-projectile-rails-find/body)
    (define-key global-map (kbd "<henkan>") 'pretty-hydra-henkan/body))
#+end_src

#+caption: Railsに便利なメニューを定義する
#+begin_src emacs-lisp
  (with-eval-after-load 'pretty-hydra
    (pretty-hydra-define pretty-hydra-projectile-rails-find (:color blue :foreign-keys warn :title "Projectile Rails")
      ("Current"
       (("M" projectile-rails-find-current-model      "Current model")
        ("V" projectile-rails-find-current-view       "Current view")
        ("C" projectile-rails-find-current-controller "Current controller")
        ("H" projectile-rails-find-current-helper     "Current helper")
        ("P" projectile-rails-find-current-spec       "Current spec")
        ("Z" projectile-rails-find-current-serializer "Current serializer"))

       "App"
       (("m" projectile-rails-find-model           "Model")
        ("v" projectile-rails-find-view            "View")
        ("c" projectile-rails-find-controller      "Controller")
        ("h" projectile-rails-find-helper          "Helper")
        ("@" projectile-rails-find-mailer          "Mailer")
        ("y" projectile-rails-find-layout       "Layout")
        ("z" projectile-rails-find-serializer      "Serializer"))

       "Assets"
       (("j" projectile-rails-find-javascript  "Javascript")
        ("s" projectile-rails-find-stylesheet  "CSS"))

       "Other"
       (("n" projectile-rails-find-migration    "Migration")
        ("r" projectile-rails-find-rake-task    "Rake task")
        ("i" projectile-rails-find-initializer  "Initializer")
        ("l" projectile-rails-find-lib          "Lib")
        ("p" projectile-rails-find-spec         "Spec")
        ("t" projectile-rails-find-locale       "Translation"))

       "Single Files"
       (("R" projectile-rails-goto-routes   "routes.rb")
        ("G" projectile-rails-goto-gemfile  "Gemfile")
        ("D" projectile-rails-goto-schema   "schema.rb")))))
#+end_src

- https://mugijiru.github.io/.emacs.d/programming/rails/

#+caption: major-mode-hydra
#+begin_src emacs-lisp
(global-set-key (kbd "M-SPC") #'major-mode-hydra)

(with-eval-after-load 'major-mode-hydra
  (major-mode-hydra-define emacs-lisp-mode nil
    ("Eval"
     (("b" eval-buffer "buffer")
      ("e" eval-defun "defun")
      ("r" eval-region "region"))
     "REPL"
     (("I" ielm "ielm"))
     "Test"
     (("t" ert "prompt")
      ("T" (ert t) "all")
      ("F" (ert :failed) "failed"))
     "Doc"
     (("f" describe-function "function")
      ("v" describe-variable "variable")
      ("i" info-lookup-symbol "info lookup")))))

(with-eval-after-load 'major-mode-hydra
  (major-mode-hydra-define org-agenda-mode nil
    ("pomodoro"
     (("s" org-pomodoro "start org-pomodoro")))))
#+end_src

メジャーモードに対するhydraを設定する。

* Display Manager
:PROPERTIES:
:ID:       f4b160f4-be75-4af6-a986-b3e097c79e7b
:END:
OS操作の便利関数。

#+caption: 音量調整する
#+begin_src emacs-lisp
  (defun kd/mint-volume-up ()
    "Linux Mintでの音量アップ."
    (interactive)
    (start-process-shell-command "volume up" nil "pactl set-sink-volume @DEFAULT_SINK@ +5%"))

  (defun kd/mint-volume-down ()
    "Linux Mintでの音量ダウン."
    (interactive)
    (start-process-shell-command "volume up" nil "pactl set-sink-volume @DEFAULT_SINK@ -5%"))
#+end_src

#+caption: 再生を停止する
#+begin_src emacs-lisp
(defun kd/player-stop ()
  "再生停止"
  (interactive)
  (start-process-shell-command "player stop" nil "playerctl stop"))
#+end_src

#+caption: ネットワークを接続・切断する
#+begin_src emacs-lisp
  (defun kd/up-network ()
    "ネットワーク接続"
    (interactive)
    (let ((passwd))
      (setq passwd (read-passwd "Password? "))
      (shell-command  (concat "for intf in /sys/class/net/*; do echo "
                              (shell-quote-argument passwd)
                              " | sudo -S ifconfig `basename $intf` up; done"))))
  (defun kd/down-network ()
    "ネットワーク切断"
    (interactive)
    (let ((passwd))
      (setq passwd (read-passwd "Password? "))
      (shell-command  (concat "for intf in /sys/class/net/*; do echo "
                              (shell-quote-argument passwd)
                              " | sudo -S ifconfig `basename $intf` down; done"))))
#+end_src

#+caption: 英語辞書をインストールする
#+begin_src emacs-lisp
  ;; (use-package ej-dict
  ;;   :straight (:host github :repo "kijimaD/ej-dict"))
  ;; (ej-dict-install-dict)
#+end_src

あまり使ってないのでコメントアウトしている。
* Helper
:PROPERTIES:
:ID:       5d064781-26b9-451d-86a5-11071e388796
:END:

その他の便利関数。

#+caption: 前のマークに戻る
#+begin_src emacs-lisp
  (defun my-exchange-point-and-mark ()
    (interactive)
    (exchange-point-and-mark)
    (deactivate-mark))
  (global-set-key (kbd "C-x C-x") 'my-exchange-point-and-mark)
#+end_src

#+caption: 行全体を削除する
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c C-k") 'kill-whole-line)
#+end_src

#+caption: カレントパスを取得する
#+begin_src emacs-lisp
  (defun current-path ()
    (interactive)
    (let ((file-path buffer-file-name)
          (dir-path default-directory))
      (cond (file-path
             (kill-new (expand-file-name file-path))
             (message "Add Kill Ring: %s" (expand-file-name file-path)))
            (dir-path
             (kill-new (expand-file-name dir-path))
             (message "Add Kill Ring: %s" (expand-file-name dir-path)))
            (t
             (error-message-string "Fail to get path name.")))))
#+end_src

#+caption: i-searchで逆側にカーソルをセットする
#+begin_src emacs-lisp
  (defun my-isearch-done-opposite (&optional nopush edit)
    "End current search in the opposite side of the match."
    (interactive)
    (funcall #'isearch-done nopush edit)
    (when isearch-other-end (goto-char isearch-other-end)))
#+end_src

#+caption: カーソルを真ん中に保ちつつ行を1つ移動する
#+begin_src emacs-lisp
  (defun my-next-line ()
    (interactive)
    (next-line)
    (recenter))
  (global-set-key (kbd "<down>") 'my-next-line)

  (defun my-previous-line ()
    (interactive)
    (previous-line)
    (recenter))
  (global-set-key (kbd "<up>") 'my-previous-line)
#+end_src

#+caption: ewwのキーバインドを設定する
#+begin_src emacs-lisp
  (eval-after-load "eww"
    '(progn
       (define-key eww-mode-map (kbd "<mouse-1>") 'my-next-line)
       (define-key eww-mode-map (kbd "<mouse-2>") 'define-word-at-point)
       (define-key eww-mode-map (kbd "<mouse-4>") 'my-previous-line)
       (define-key eww-mode-map (kbd "<down-mouse-4>") 'nil)
       (define-key eww-mode-map (kbd "<mouse-5>") 'my-next-line)
       (define-key eww-mode-map (kbd "<down-mouse-5>") 'nil)
       (define-key eww-mode-map (kbd "<mouse-3>") 'my-previous-line)
       (define-key eww-mode-map (kbd "<mouse-8>") 'backward-word)
       (define-key eww-mode-map (kbd "<mouse-9>") 'forward-word)))
#+end_src

#+caption: 最後のタイマーをキャンセルする
#+begin_src emacs-lisp
(defun kd/cancel-last-timer ()
  (interactive)
  (cancel-timer (car (last timer-list))))
#+end_src

#+caption: Cの関数に定義ジャンプできるようにする
#+begin_src emacs-lisp
;; Emacs C source directory
(let ((src-dir "~/ProjectOrg/emacs/src"))
  (if (file-directory-p src-dir)
      (setq source-directory src-dir)))
#+end_src

~~/ProjectOrg~ にEmacsのソースコードを配置しておく。
