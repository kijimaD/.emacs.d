#+title: Kijimad Emacs Config
#+SETUPFILE: https://gitlab.com/OlMon/org-themes/-/raw/master/src/bigblow_inline/bigblow_inline.theme

* EXWM
:PROPERTIES:
:ID:       c99b472b-dd3b-494e-a733-5cbf95781064
:END:
EXWMはEmacs上で動くウィンドウマネージャ。
- https://github.com/daviwil/emacs-from-scratch/blob/39f63fe133cd4c41e13bbd1551c6517162851411/show-notes/Emacs-Desktop-03.org

#+caption: require
#+begin_src emacs-lisp
  (require 'exwm)
  (require 'exwm-config)
#+end_src

#+caption: ほかのウィンドウマネージャを置き換えて起動する
#+begin_src emacs-lisp
  (setq exwm-replace t)
#+end_src

#+caption: ほかのワークスペースのバッファに移動できるようにする
#+begin_src emacs-lisp
  (setq exwm-layout-show-all-buffers t)
#+end_src

#+caption: マウス設定
#+begin_src emacs-lisp
  (setq mouse-autoselect-window nil
          focus-follows-mouse t
          exwm-workspace-warp-cursor t
          exwm-workspace-number 5)
#+end_src

#+caption: ワークスペースのバッファに名前をつける
#+begin_src emacs-lisp
(add-hook 'exwm-update-class-hook
          (lambda ()
            (exwm-workspace-rename-buffer exwm-class-name)))
(add-hook 'exwm-update-title-hook
          (lambda ()
            (pcase exwm-class-name
              ("qutebrowser" (exwm-workspace-rename-buffer (format "Qutebrowser: %s" exwm-title)))
              ("chrome" (exwm-workspace-rename-buffer (format "Chrome: %s" exwm-title))))))
#+end_src

#+caption: ウィンドウのセットを起動する
#+begin_src emacs-lisp
(defun kd/set-init ()
  "Window Manager関係の各種プログラムを起動する."
  (interactive)
  (progn
    (call-process-shell-command "shepherd")
    (call-process-shell-command "~/dotfiles/.config/polybar/launch.sh")
    (call-process-shell-command "blueberry")

    (exwm-workspace-switch-create 2)
    (start-process-shell-command "google-chrome" nil "google-chrome")
    (start-process-shell-command "firefox" nil "firefox")
    (start-process-shell-command "spotify" nil "spotify")

    (message "please wait...")
    (sleep-for 2)

    (exwm-workspace-switch-create 0)
    (persp-switch "1")
    (delete-other-windows)
    (org-journal-new-entry nil)
    (vterm-toggle)
    (vterm-toggle)
    (persp-switch "2")
    (find-file "~/roam")
    (vterm-toggle)
    (vterm-toggle)
    (org-agenda nil "z")
    (persp-switch "3")
    (split-window-right)
    (switch-to-buffer "firefox")
    (persp-switch "4")
    (switch-to-buffer "firefox")
    (vterm-toggle)
    (vterm-toggle)
    (persp-switch "5")
    (find-file "~/dotfiles")
    (vterm-toggle)
    (vterm-toggle)
    (magit-status)
    (persp-switch "6")
    (find-file "~/.emacs.d/conf")
    (vterm-toggle)
    (vterm-toggle)
    (magit-status)
    (persp-switch "7")
    (find-file "~/ProjectOrg")
    (persp-switch "8")
    (find-file "~/Project")
    (persp-switch "9")
    (elfeed)

    (exwm-workspace-switch-create 1)
    (persp-switch "1")
    (persp-switch "2")
    (find-file "~/roam")
    (org-agenda nil "z")
    (persp-switch "4")
    (switch-to-buffer "Google-chrome")
    (persp-switch "8")
    (find-file "~/Project")

    (exwm-workspace-switch-create 2)
    (switch-to-buffer "Spotify")

    (exwm-workspace-switch-create 0)
    (persp-switch "4")

    (message "settings done!")))
#+end_src

#+caption: 背景を設定する
#+begin_src emacs-lisp
(defun kd/set-background ()
  "背景をセットする."
  (interactive)
  (start-process-shell-command "compton" nil "compton --config ~/dotfiles/.config/compton/compton.conf")
  (start-process-shell-command "fehbg" nil "~/dotfiles/.fehbg"))
#+end_src

#+caption: キーバインド設定
#+begin_src emacs-lisp
(define-key exwm-mode-map (kbd "C-M-:") 'vterm-toggle)
(define-key exwm-mode-map (kbd "C-M-<right>") 'persp-next)
(define-key exwm-mode-map (kbd "C-M-<left>") 'persp-prev)
(define-key exwm-mode-map (kbd "<henkan>") 'pretty-hydra-henkan/body)
#+end_src

#+caption: 設定する
#+begin_src emacs-lisp
  (when window-system
    (progn
      (exwm-config-example)
      ;; (kd/set-init)
      ;; (kd/set-background)
      ))
#+end_src
* Polybar
:PROPERTIES:
:ID:       31fe46cc-99bc-46e5-bf49-0483fcdd99ed
:END:
polybarは柔軟にカスタマイズできるメニューバーを表示するソフトウェア。polybarとの連携を記載する。

#+caption: polybarプロセスを保持する変数
#+begin_src emacs-lisp
  (defvar kd/polybar-process nil
    "Holds the process of the running Polybar instance, if any")
#+end_src

#+caption: バーを起動する
#+begin_src emacs-lisp
  (defun kd/start-panel ()
    (interactive)
    (kd/kill-panel)
    (setq kd/polybar-process (start-process-shell-command "polybar" nil "~/dotfiles/.config/polybar/launch.sh")))
#+end_src

#+caption: バーを停止する
#+begin_src emacs-lisp
  (defun kd/kill-panel ()
    (interactive)
    (when kd/polybar-process
      (ignore-errors
        (kill-process kd/polybar-process)))
    (setq kd/polybar-process nil))
#+end_src

#+caption: ワークスペースをpolybarで表示する設定
#+begin_src emacs-lisp
  (defun kd/polybar-exwm-workspace ()
    (pcase exwm-workspace-current-index
      (0 "%{F#797D7F}Work%{F-} Home")
      (1 "Work %{F#797D7F}Home%{F-}")
      (2 "")
      (3 "")
      (4 "")
      (9 "")))

  (defun kd/send-polybar-exwm-workspace ()
    (kd/send-polybar-hook "exwm-workspace" 1))

  (defun kd/send-polybar-hook (module-name hook-index)
    (start-process-shell-command "polybar-msg" nil (format "polybar-msg hook %s %s" module-name hook-index)))

  (add-hook 'exwm-workspace-switch-hook #'kd/send-polybar-exwm-workspace)
#+end_src
* Workspace
:PROPERTIES:
:ID:       ca11b45d-81a2-4759-93f8-0ff056d15df8
:END:
#+caption: モード初期化
#+begin_src emacs-lisp
  (require 'perspective)
  (setq persp-initial-frame-name "1")
  (setq persp-modestring-dividers '("" "" " "))
  (persp-mode 1)
#+end_src

#+caption: ワークスペースを生成する
#+begin_src emacs-lisp
  (mapc (lambda (i)
          (persp-switch (int-to-string i)))
        (number-sequence 1 9))
  (persp-switch "1")
#+end_src
* Hydra
:PROPERTIES:
:ID:       0e450475-54cf-432d-8a75-d8a55b6c83bf
:END:
Hydraはカスタマイズ可能なキー表示を追加するパッケージ。

#+caption: グローバルに便利なメニューを追加する
#+begin_src emacs-lisp
  (with-eval-after-load 'pretty-hydra
    (pretty-hydra-define pretty-hydra-henkan (:color blue :foreign-keys warn :title "Convenient Tools")
      ("Media"
       (("<prior>" kd/mint-volume-up "up")
        ("<next>" kd/mint-volume-down "down")
        ("<pause>" kd/player-stop "stop"))

       "Find"
       (("a" counsel-apropos "apropos")
        ("f" counsel-ag "ag")
        ("h" counsel-find-library "lib")
        ("i" counsel-imenu "imenu")
        ("r" counsel-register "register")
        ("b" counsel-bookmark "bookmark")
        ("p" persp-ivy-switch-buffer "persp-buffer")
        ("w" swiper-all-thing-at-point "all"))

       "Execute"
       (("e" counsel-linux-app "run")
        ("c" recompile "recompile")
        ("s" counsel-search "google"))

       "Git"
       (("g" magit-blame)
        (">" git-gutter+-next-hunk)
        ("<" git-gutter+-previous-hunk)
        ("@" git-timemachine)
        ("l" git-link))

       "Edit"
       (("q" query-replace "replace")
        ("y" ivy-yasnippet "yas"))

       "Window"
       (("1" (lambda nil (interactive) (persp-switch (int-to-string 1))) "Journal")
        ("2" (lambda nil (interactive) (persp-switch (int-to-string 2))) "Roam")
        ("3" (lambda nil (interactive) (persp-switch (int-to-string 3))) "Browser(Half)")
        ("4" (lambda nil (interactive) (persp-switch (int-to-string 4))) "Browser(Full)")
        ("5" (lambda nil (interactive) (persp-switch (int-to-string 5))) "Dotfiles")
        ("6" (lambda nil (interactive) (persp-switch (int-to-string 6))) "Emacs")
        ("7" (lambda nil (interactive) (persp-switch (int-to-string 7))) "Sub")
        ("8" (lambda nil (interactive) (persp-switch (int-to-string 8))) "Main")
        ("9" (lambda nil (interactive) (persp-switch (int-to-string 9))) "Blueberry"))))

    (define-key projectile-rails-mode-map (kbd "C-c r") 'pretty-hydra-projectile-rails-find/body)
    (define-key global-map (kbd "<henkan>") 'pretty-hydra-henkan/body))
#+end_src

#+caption: Railsに便利なメニューを定義する
#+begin_src emacs-lisp
  (with-eval-after-load 'pretty-hydra
    (pretty-hydra-define pretty-hydra-projectile-rails-find (:color blue :foreign-keys warn :title "Projectile Rails")
      ("Current"
       (("M" projectile-rails-find-current-model      "Current model")
        ("V" projectile-rails-find-current-view       "Current view")
        ("C" projectile-rails-find-current-controller "Current controller")
        ("H" projectile-rails-find-current-helper     "Current helper")
        ("P" projectile-rails-find-current-spec       "Current spec")
        ("Z" projectile-rails-find-current-serializer "Current serializer"))

       "App"
       (("m" projectile-rails-find-model           "Model")
        ("v" projectile-rails-find-view            "View")
        ("c" projectile-rails-find-controller      "Controller")
        ("h" projectile-rails-find-helper          "Helper")
        ("@" projectile-rails-find-mailer          "Mailer")
        ("y" projectile-rails-find-layout       "Layout")
        ("z" projectile-rails-find-serializer      "Serializer"))

       "Assets"
       (("j" projectile-rails-find-javascript  "Javascript")
        ("s" projectile-rails-find-stylesheet  "CSS"))

       "Other"
       (("n" projectile-rails-find-migration    "Migration")
        ("r" projectile-rails-find-rake-task    "Rake task")
        ("i" projectile-rails-find-initializer  "Initializer")
        ("l" projectile-rails-find-lib          "Lib")
        ("p" projectile-rails-find-spec         "Spec")
        ("t" projectile-rails-find-locale       "Translation"))

       "Single Files"
       (("R" projectile-rails-goto-routes   "routes.rb")
        ("G" projectile-rails-goto-gemfile  "Gemfile")
        ("D" projectile-rails-goto-schema   "schema.rb")))))
#+end_src

- https://mugijiru.github.io/.emacs.d/programming/rails/

#+caption: major-mode-hydra
#+begin_src emacs-lisp
(global-set-key (kbd "M-SPC") #'major-mode-hydra)

(with-eval-after-load 'major-mode-hydra
  (major-mode-hydra-define emacs-lisp-mode nil
    ("Eval"
     (("b" eval-buffer "buffer")
      ("e" eval-defun "defun")
      ("r" eval-region "region"))
     "REPL"
     (("I" ielm "ielm"))
     "Test"
     (("t" ert "prompt")
      ("T" (ert t) "all")
      ("F" (ert :failed) "failed"))
     "Doc"
     (("f" describe-function "function")
      ("v" describe-variable "variable")
      ("i" info-lookup-symbol "info lookup")))))

(with-eval-after-load 'major-mode-hydra
  (major-mode-hydra-define org-agenda-mode nil
    ("pomodoro"
     (("s" org-pomodoro "start org-pomodoro")))))
#+end_src

メジャーモードに対するhydraを設定する。

* Display Manager
:PROPERTIES:
:ID:       f4b160f4-be75-4af6-a986-b3e097c79e7b
:END:
OS操作の便利関数。

#+caption: 音量調整する
#+begin_src emacs-lisp
  (defun kd/mint-volume-up ()
    "Linux Mintでの音量アップ."
    (interactive)
    (start-process-shell-command "volume up" nil "pactl set-sink-volume @DEFAULT_SINK@ +5%"))

  (defun kd/mint-volume-down ()
    "Linux Mintでの音量ダウン."
    (interactive)
    (start-process-shell-command "volume up" nil "pactl set-sink-volume @DEFAULT_SINK@ -5%"))
#+end_src

#+caption: 再生を停止する
#+begin_src emacs-lisp
(defun kd/player-stop ()
  "再生停止"
  (interactive)
  (start-process-shell-command "player stop" nil "playerctl stop"))
#+end_src

#+caption: ネットワークを接続・切断する
#+begin_src emacs-lisp
  (defun kd/up-network ()
    "ネットワーク接続"
    (interactive)
    (let ((passwd))
      (setq passwd (read-passwd "Password? "))
      (shell-command  (concat "for intf in /sys/class/net/*; do echo "
                              (shell-quote-argument passwd)
                              " | sudo -S ifconfig `basename $intf` up; done"))))
  (defun kd/down-network ()
    "ネットワーク切断"
    (interactive)
    (let ((passwd))
      (setq passwd (read-passwd "Password? "))
      (shell-command  (concat "for intf in /sys/class/net/*; do echo "
                              (shell-quote-argument passwd)
                              " | sudo -S ifconfig `basename $intf` down; done"))))
#+end_src

#+caption: 英語辞書をインストールする
#+begin_src emacs-lisp
  ;; (use-package ej-dict
  ;;   :straight (:host github :repo "kijimaD/ej-dict"))
  ;; (ej-dict-install-dict)
#+end_src

あまり使ってないのでコメントアウトしている。
* Helper
:PROPERTIES:
:ID:       5d064781-26b9-451d-86a5-11071e388796
:END:
#+caption: 前のマークに戻る
#+begin_src emacs-lisp
  (defun my-exchange-point-and-mark ()
    (interactive)
    (exchange-point-and-mark)
    (deactivate-mark))
  (global-set-key (kbd "C-x C-x") 'my-exchange-point-and-mark)
#+end_src

#+caption: 行全体を削除する
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c C-k") 'kill-whole-line)
#+end_src

#+caption: カレントパスを取得する
#+begin_src emacs-lisp
  (defun current-path ()
    (interactive)
    (let ((file-path buffer-file-name)
          (dir-path default-directory))
      (cond (file-path
             (kill-new (expand-file-name file-path))
             (message "Add Kill Ring: %s" (expand-file-name file-path)))
            (dir-path
             (kill-new (expand-file-name dir-path))
             (message "Add Kill Ring: %s" (expand-file-name dir-path)))
            (t
             (error-message-string "Fail to get path name.")))))
#+end_src

#+caption: i-searchで逆側にカーソルをセットする
#+begin_src emacs-lisp
  (defun my-isearch-done-opposite (&optional nopush edit)
    "End current search in the opposite side of the match."
    (interactive)
    (funcall #'isearch-done nopush edit)
    (when isearch-other-end (goto-char isearch-other-end)))
#+end_src

#+caption: カーソルを真ん中に保ちつつ行を1つ移動する
#+begin_src emacs-lisp
  (defun my-next-line ()
    (interactive)
    (next-line)
    (recenter))
  (global-set-key (kbd "<down>") 'my-next-line)

  (defun my-previous-line ()
    (interactive)
    (previous-line)
    (recenter))
  (global-set-key (kbd "<up>") 'my-previous-line)
#+end_src

#+caption: ewwのキーバインドを設定する
#+begin_src emacs-lisp
  (eval-after-load "eww"
    '(progn
       (define-key eww-mode-map (kbd "<mouse-1>") 'my-next-line)
       (define-key eww-mode-map (kbd "<mouse-2>") 'define-word-at-point)
       (define-key eww-mode-map (kbd "<mouse-4>") 'my-previous-line)
       (define-key eww-mode-map (kbd "<down-mouse-4>") 'nil)
       (define-key eww-mode-map (kbd "<mouse-5>") 'my-next-line)
       (define-key eww-mode-map (kbd "<down-mouse-5>") 'nil)
       (define-key eww-mode-map (kbd "<mouse-3>") 'my-previous-line)
       (define-key eww-mode-map (kbd "<mouse-8>") 'backward-word)
       (define-key eww-mode-map (kbd "<mouse-9>") 'forward-word)))
#+end_src

#+caption: 最後のタイマーをキャンセルする
#+begin_src emacs-lisp
(defun kd/cancel-last-timer ()
  (interactive)
  (cancel-timer (car (last timer-list))))
#+end_src

#+caption: Cの関数に定義ジャンプできるようにする
#+begin_src emacs-lisp
;; Emacs C source directory
(let ((src-dir "~/ProjectOrg/emacs/src"))
  (if (file-directory-p src-dir)
      (setq source-directory src-dir)))
#+end_src

~~/ProjectOrg~ にEmacsのソースコードを配置しておく。
