#+SETUPFILE: https://gitlab.com/OlMon/org-themes/-/raw/master/src/simple_gray/simple_gray.theme

* ワークスペース
:PROPERTIES:
:ID:       ca11b45d-81a2-4759-93f8-0ff056d15df8
:END:
#+caption: モード初期化
#+begin_src emacs-lisp
  (require 'perspective)
  (setq persp-initial-frame-name "1")
  (setq persp-modestring-dividers '("" "" " "))
  (persp-mode 1)
#+end_src

#+caption: ワークスペースを生成する
#+begin_src emacs-lisp
  (mapc (lambda (i)
          (persp-switch (int-to-string i)))
        (number-sequence 1 9))
  (persp-switch "1")
#+end_src
* Emacsヘルパー関数
:PROPERTIES:
:ID:       78ad196c-913d-427c-a0a4-a2fd9609b815
:END:
#+caption: 前のマークに戻る
#+begin_src emacs-lisp
  (defun my-exchange-point-and-mark ()
    (interactive)
    (exchange-point-and-mark)
    (deactivate-mark))
  (global-set-key (kbd "C-x C-x") 'my-exchange-point-and-mark)
#+end_src

#+caption: 行全体を削除する
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c C-k") 'kill-whole-line)
#+end_src

#+caption: カレントパスを取得する
#+begin_src emacs-lisp
  (defun current-path ()
    (interactive)
    (let ((file-path buffer-file-name)
          (dir-path default-directory))
      (cond (file-path
             (kill-new (expand-file-name file-path))
             (message "Add Kill Ring: %s" (expand-file-name file-path)))
            (dir-path
             (kill-new (expand-file-name dir-path))
             (message "Add Kill Ring: %s" (expand-file-name dir-path)))
            (t
             (error-message-string "Fail to get path name.")))))
#+end_src

#+caption: i-searchで逆側にカーソルをセットする
#+begin_src emacs-lisp
  (defun my-isearch-done-opposite (&optional nopush edit)
    "End current search in the opposite side of the match."
    (interactive)
    (funcall #'isearch-done nopush edit)
    (when isearch-other-end (goto-char isearch-other-end)))
#+end_src

#+caption: カーソルを真ん中に保ちつつ行を1つ移動する
#+begin_src emacs-lisp
  (defun my-next-line ()
    (interactive)
    (next-line)
    (recenter))
  (global-set-key (kbd "<down>") 'my-next-line)

  (defun my-previous-line ()
    (interactive)
    (previous-line)
    (recenter))
  (global-set-key (kbd "<up>") 'my-previous-line)
#+end_src

#+caption: ewwのキーバインドを設定する
#+begin_src emacs-lisp
  (eval-after-load "eww"
    '(progn
       (define-key eww-mode-map (kbd "<mouse-1>") 'my-next-line)
       (define-key eww-mode-map (kbd "<mouse-2>") 'define-word-at-point)
       (define-key eww-mode-map (kbd "<mouse-4>") 'my-previous-line)
       (define-key eww-mode-map (kbd "<down-mouse-4>") 'nil)
       (define-key eww-mode-map (kbd "<mouse-5>") 'my-next-line)
       (define-key eww-mode-map (kbd "<down-mouse-5>") 'nil)
       (define-key eww-mode-map (kbd "<mouse-3>") 'my-previous-line)
       (define-key eww-mode-map (kbd "<mouse-8>") 'backward-word)
       (define-key eww-mode-map (kbd "<mouse-9>") 'forward-word)))
#+end_src

#+caption: 最後のタイマーをキャンセルする
#+begin_src emacs-lisp
(defun kd/cancel-last-timer ()
  (interactive)
  (cancel-timer (car (last timer-list))))
#+end_src

#+caption: Cの関数に定義ジャンプできるようにする
#+begin_src emacs-lisp
;; Emacs C source directory
(let ((src-dir "~/ProjectOrg/emacs/src"))
  (if (file-directory-p src-dir)
      (setq source-directory src-dir)))
#+end_src

~~/ProjectOrg~ にEmacsのソースコードを配置しておく。
* ディスプレイマネージャー便利関数
:PROPERTIES:
:ID:       f4b160f4-be75-4af6-a986-b3e097c79e7b
:END:
OS操作の便利関数。

#+caption: 音量調整する
#+begin_src emacs-lisp
  (defun kd/mint-volume-up ()
    "Linux Mintでの音量アップ."
    (interactive)
    (start-process-shell-command "volume up" nil "pactl set-sink-volume @DEFAULT_SINK@ +5%"))

  (defun kd/mint-volume-down ()
    "Linux Mintでの音量ダウン."
    (interactive)
    (start-process-shell-command "volume up" nil "pactl set-sink-volume @DEFAULT_SINK@ -5%"))
#+end_src

#+caption: 再生を停止する
#+begin_src emacs-lisp
(defun kd/player-stop ()
  "再生停止"
  (interactive)
  (start-process-shell-command "player stop" nil "playerctl stop"))
#+end_src

#+caption: ネットワークを接続・切断する
#+begin_src emacs-lisp
  (defun kd/up-network ()
    "ネットワーク接続"
    (interactive)
    (let ((passwd))
      (setq passwd (read-passwd "Password? "))
      (shell-command  (concat "for intf in /sys/class/net/*; do echo "
                              (shell-quote-argument passwd)
                              " | sudo -S ifconfig `basename $intf` up; done"))))
  (defun kd/down-network ()
    "ネットワーク切断"
    (interactive)
    (let ((passwd))
      (setq passwd (read-passwd "Password? "))
      (shell-command  (concat "for intf in /sys/class/net/*; do echo "
                              (shell-quote-argument passwd)
                              " | sudo -S ifconfig `basename $intf` down; done"))))
#+end_src

#+caption: 英語辞書をインストールする
#+begin_src emacs-lisp
  ;; (use-package ej-dict
  ;;   :straight (:host github :repo "kijimaD/ej-dict"))
  ;; (ej-dict-install-dict)
#+end_src

あまり使ってないのでコメントアウトしている。
